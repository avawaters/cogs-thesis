rm(data)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
rm(data)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(participants)
rm(data)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(data)
sub_df
rm(data)
rm(participants)
rm(wted_resp)
rm(responses)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(data)
View(sub_df)
wted_resp
responses
rm(data)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(sub_df)
###### LOOP THROUGH ALL SUBJECTS ######
sub <- sub_list[1]
# import JSON data and delete unnecessary cols
sub_df <- fromJSON(paste0(dir, gen, "-", sub, ".json")) %>%
select(-c("rt", "trial_type", "time_elapsed", "internal_node_id",
"device_id", "estimated_stimulus_onset", "question_order"))
sub_df[16, "response"]
unlist(sub_df[16, "response"])
unlist(sub_df[16, "response"]) == "No"
# 0 = no, 1 = yes
music <- as.numeric(ifelse(unlist(sub_df[16, "response"]) == "No", 0, 1))
rm(data)
rm(freq_resp)
rm(participants)
rm(responses)
rm(wted_resp)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(sub_df)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
sub
View(sub_df)
wavfile = pm_wav_files[1]
file_loc <- paste0(pm_dir, wavfile)
# set reference note by getting Hz of expected note
ref_note <- notesToHz(unlist(strsplit(unlist(strsplit(wavfile, "-"))[3], ".wav")))
wav_obj <- readWave(file_loc) %>% channel("left")
View(wav_obj)
wspec_obj <- periodogram(wav_obj, width=4096)
wavfile = pm_wav_files[2]
file_loc <- paste0(pm_dir, wavfile)
# set reference note by getting Hz of expected note
ref_note <- notesToHz(unlist(strsplit(unlist(strsplit(wavfile, "-"))[3], ".wav")))
wav_obj <- readWave(file_loc) %>% channel("left")
wspec_obj <- periodogram(wav_obj, width=4096)
wavfile = pm_wav_files[3]
file_loc <- paste0(pm_dir, wavfile)
# set reference note by getting Hz of expected note
ref_note <- notesToHz(unlist(strsplit(unlist(strsplit(wavfile, "-"))[3], ".wav")))
wav_obj <- readWave(file_loc) %>% channel("left")
wspec_obj <- periodogram(wav_obj, width=4096)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(responses)
View(participants)
View(data)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(responses)
View(adj_wted_resp)
View(unadj_wted_resp)
View(data)
View(unadj_wted_resp)
wted_resp <- inner_join(unadj_wted_resp, adj_wted_resp, by=c("seed"))
View(wted_resp)
rm(wted_resp)
rm(responses)
# join unweighted and weighted responses for adjusted and unadjusted
unadj_responses <- inner_join(unadj_wted_resp, unadj_freq_resp, by=c("seed"))
rm(adj_freq_resp, adj_wted_resp, unadj_freq_resp, unadj_wted_resp, unadj_responses)
### EXTRACT MOST PREDICTABLE NOTE (unadjusted and adjusted)
unadj_wted_resp <- data %>% count(seed, unadj_response, wt=confidence, sort=TRUE) %>%
mutate(unadj_wted_n=n) %>% select(-n)
adj_wted_resp <- data %>% count(seed, adj_response, wt=confidence, sort=TRUE) %>%
mutate(adj_wted_n=n) %>% select(-n)
unadj_freq_resp <- data %>% count(seed, unadj_response, sort=TRUE)
adj_freq_resp <- data %>% count(seed, adj_response, sort=TRUE)
# join unweighted and weighted responses
unadj_responses <- inner_join(unadj_wted_resp, unadj_freq_resp, by=c("seed", "response"))
?inner_join
# join unweighted and weighted responses
unadj_responses <- inner_join(unadj_wted_resp, unadj_freq_resp,
by=c("seed", "unadj_response"))
View(unadj_responses)
adj_responses <- inner_join(adj_wted_resp, adj_freq_resp,
by=c("seed", "adj_response"))
View(adj_responses)
responses <- inner_join(unadj_responses, adj_responses,
by=join_by("seed"=="seed", "unadj_response"=="adj_response"))
View(responses)
rm(adj_freq_resp, adj_responses, adj_wted_resp, unadj_freq_resp, unadj_responses, unadj_wted_resp)
rm(responses)
### EXTRACT MOST PREDICTABLE NOTE (unadjusted and adjusted)
unadj_wted_resp <- data %>% count(seed, unadj_response, wt=confidence, sort=TRUE) %>%
mutate(unadj_wted_n=n) %>% select(-n)
unadj_freq_resp <- data %>% count(seed, unadj_response, sort=TRUE)
adj_wted_resp <- data %>% count(seed, adj_response, wt=confidence, sort=TRUE) %>%
mutate(adj_wted_n=n) %>% select(-n)
adj_freq_resp <- data %>% count(seed, adj_response, sort=TRUE)
# join unweighted and weighted responses
unadj_responses <- inner_join(unadj_wted_resp, unadj_freq_resp,
by=c("seed", "unadj_response")) %>%
mutate(unadj_n=n) %>% select(-n)
adj_responses <- inner_join(adj_wted_resp, adj_freq_resp,
by=c("seed", "adj_response")) %>%
mutate(adj_n=n) %>% select(-n)
#
responses <- full_join(unadj_responses, adj_responses,
by=join_by("seed"=="seed",
"unadj_response"=="adj_response"))
View(responses)
??rename
rm(adj_freq_resp, adj_responses, adj_wted_resp, unadj_freq_resp, unadj_responses, unadj_wted_resp)
rm(responses)
# join unweighted and weighted responses
unadj_responses <- inner_join(unadj_wted_resp, unadj_freq_resp,
by=c("seed", "unadj_response")) %>%
rename(unadj_n=n)
### EXTRACT MOST PREDICTABLE NOTE
# unadjusted responses
unadj_wted_resp <- data %>% count(seed, unadj_response,
wt=confidence, sort=TRUE) %>%
rename(unadj_n=n)
View(unadj_wted_resp)
unadj_freq_resp <- data %>% count(seed, unadj_response, sort=TRUE)
# adjusted responses
adj_wted_resp <- data %>% count(seed, adj_response,
wt=confidence, sort=TRUE) %>%
rename(adj_n=n)
adj_freq_resp <- data %>% count(seed, adj_response, sort=TRUE)
# join unweighted and weighted responses
unadj_responses <- inner_join(unadj_wted_resp, unadj_freq_resp,
by=c("seed", "unadj_response")) %>%
rename(unadj_n=n)
# join unweighted and weighted responses
unadj_responses <- inner_join(unadj_wted_resp, unadj_freq_resp,
by=c("seed", "unadj_response")) %>%
mutate(unadj_n=n) %>% select(-n)
View(unadj_responses)
rm(unadj_freq_resp, unadj_responses, unadj_wted_resp)
rn(adj_freq_resp, adj_wted_resp, participants)
rm(adj_freq_resp, adj_wted_resp, participants)
### EXTRACT MOST PREDICTABLE NOTE
# unadjusted responses
unadj_wted_resp <- data %>% count(seed, unadj_response,
wt=confidence, sort=TRUE) %>%
rename(unadj_n=n)
unadj_freq_resp <- data %>% count(seed, unadj_response, sort=TRUE)
View(unadj_freq_resp)
View(unadj_wted_resp)
rm(unadj_freq_resp, unadj_wted_resp)
### EXTRACT MOST PREDICTABLE NOTE
# unadjusted responses
unadj_wted_resp <- data %>% count(seed, unadj_response,
wt=confidence, sort=TRUE) %>%
rename(unadj_wted_n=n)
unadj_freq_resp <- data %>% count(seed, unadj_response, sort=TRUE)
View(unadj_wted_resp)
View(unadj_freq_resp)
rm(unadj_freq_resp)
unadj_freq_resp <- data %>% count(seed, unadj_response, sort=TRUE) %>%
rename(unadj_n=n)
View(unadj_freq_resp)
View(unadj_wted_resp)
# join unweighted and weighted responses
unadj_responses <- inner_join(unadj_wted_resp, unadj_freq_resp,
by=c("seed", "unadj_response"))
View(unadj_responses)
# adjusted responses
adj_wted_resp <- data %>% count(seed, adj_response,
wt=confidence, sort=TRUE) %>%
rename(adj_wted_n=n)
adj_freq_resp <- data %>% count(seed, adj_response, sort=TRUE) %>%
rename(adj_n=n)
adj_responses <- inner_join(adj_wted_resp, adj_freq_resp,
by=c("seed", "adj_response"))
#
responses <- full_join(unadj_responses, adj_responses,
by=join_by("seed"=="seed",
"unadj_response"=="adj_response"))
View(responses)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
# create full df with unadjusted and adjusted responses
responses <- full_join(unadj_responses, adj_responses,
by=join_by("seed"=="seed",
"unadj_response"=="adj_response")) %>%
rename(response=unadj_response)
# write csvs of responses, data, and participants
responses %>% write.csv(file=paste0(dir, gen, "-responses.csv"), row.names=FALSE)
data %>% write.csv(file=paste0(dir, gen, "-responses_by_subject.csv"), row.names=FALSE)
participants %>% write.csv(file=paste0("../data/", gen, "-participants.csv"), row.names=FALSE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
sub_df
# info about where to find and store base64 data
pitches <- sub_df[!is.na(sub_df["pitch"]), "pitch"]
seeds <- unlist(sub_df[!is.na(sub_df["task"]), "melody"])[2:5]
# names of files where audio should be stored
files <- c(unlist(lapply(pitches, function(p) paste0(fname, p, ".webm"))),
unlist(lapply(seeds, function(s) paste0(fname, s, ".webm"))))
file <- files[1]
# check if we are working with pitch matching or trial data
if (str_detect(file, "seed")) {
# seed we are extracting audio for
seed <- substr(unlist(strsplit(file, "-"))[3], 1, 7)
# row where the response is given
row_idx <- which(sub_df$melody == seed)[1]
}
else {
# pitch of audio we are extracting
pitch <- substr(unlist(strsplit(file, "-"))[3], 1, 2)
# row where the response is given
row_idx <- which(sub_df$pitch == pitch)
# decode base64 data stored in the response col
b64_str <- base64decode(unlist(sub_df$response[row_idx]))
file <- files[2]
# pitch of audio we are extracting
pitch <- substr(unlist(strsplit(file, "-"))[3], 1, 2)
# row where the response is given
row_idx <- which(sub_df$pitch == pitch)
View(sub_df)
file <- files[3]
# pitch of audio we are extracting
pitch <- substr(unlist(strsplit(file, "-"))[3], 1, 2)
# row where the response is given
row_idx <- which(sub_df$pitch == pitch)
file <- files[4]
# seed we are extracting audio for
seed <- substr(unlist(strsplit(file, "-"))[3], 1, 7)
# row where the response is given
row_idx <- which(sub_df$melody == seed)[1]
file <- files[5]
# seed we are extracting audio for
seed <- substr(unlist(strsplit(file, "-"))[3], 1, 7)
# row where the response is given
row_idx <- which(sub_df$melody == seed)[1]
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(participants)
View(data)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(responses)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(participants)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(data)
# import all participant data
files <- list.files(path="../data/participants/")
??read_csv
library(dplyr)
df <- read_csv(files[1])
library(tidyverse)
df <- read_csv(files[1])
df <- read_csv(paste0("../data/participants/", files[1]))
summary <- data.frame(gen=factor(),
n=numeric(),
range=numeric(),
music=numeric(),
error_mean=numeric(),
error_med=numeric(),
error_std=numeric())
View(df)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/summarize.R", echo=TRUE)
df$gen <- as.factor(df$gen)
typeof(df)
typeof(df$gen)
head(df)
df %>% group_by(gen) %>% n()
df %>% group_by(gen) %>% n(id)
df %>% group_by(gen) %>% summarize(n=n())
df %>% group_by(gen) %>% mutate(n=n()) %>%
summarize(range_prop=1 - (sum(range)/n))
df %>% group_by(gen) %>% mutate(n=n())
df %>% summarize(range_prop=1 - (sum(range)/n))
rlang::last_trace()
df %>% group_by(gen) %>% mutate(n=n()) %>% ungroup()
summary <- data.frame(gen=factor(),
n=numeric(),
range=numeric(),
music=numeric(),
error_mean=numeric(),
error_std=numeric(),
error_med=numeric())
df %>% group_by(gen) %>% summarize(range_prop=1 - (sum(range)/n),
music_prop=sum(music)/n,
error_mean=mean(pitch_error),
error_std=sd(pitch_error),
error_med=median(pitch_error))
df <- read_csv(paste0("../data/participants/", files[1]))
df <- read_csv(paste0("../data/participants/", files[1]), show_col_types=FALSE)
for (f in files[2:3]) {
df <- rbind(df, read_csv(paste0("../data/participants/", f)))
}
head(df)
# recode gen var to factor
df$gen <- as.factor(df$gen)
df %>% group_by(gen) %>% summarize(range_prop=1 - (sum(range)/n()),
music_prop=sum(music)/n(),
error_mean=mean(pitch_error),
error_std=sd(pitch_error),
error_med=median(pitch_error))
View(df)
df %>% group_by(gen) %>% summarize(range_prop=1 - (sum(range)/n()),
music_prop=sum(music)/n(),
error_mean=mean(pitch_error, na.rm=TRUE),
error_std=sd(pitch_error, na.rm=TRUE),
error_med=median(pitch_error, na.rm=TRUE))
df %>% group_by(gen) %>% summarize(n=n(),
range_prop=1 - (sum(range)/n()),
music_prop=sum(music)/n(),
error_mean=mean(pitch_error, na.rm=TRUE),
error_std=sd(pitch_error, na.rm=TRUE),
error_med=median(pitch_error, na.rm=TRUE))
participants <- df %>% group_by(gen) %>% summarize(n=n(),
range_prop=1 - (sum(range)/n()),
music_prop=sum(music)/n())
# table for results section
results <- df %>% group_by(gen) %>% summarize(na=sum(is.na(pitch_error)),
error_mean=mean(pitch_error, na.rm=TRUE),
error_std=sd(pitch_error, na.rm=TRUE),
error_med=median(pitch_error, na.rm=TRUE))
# save as CSV
View(results)
View(results)
participants <- df %>% group_by(gen) %>% summarize(n=n(),
range_prop=(1 - (sum(range)/n())) * 100,
music_prop=(sum(music)/n()) * 100)
View(participants)
# summarize across all participants
music <- mean(participants$music_prop)
range <- mean(participants$range_prop)
View(participants)
results <- df %>% group_by(gen) %>% summarize(na=sum(is.na(pitch_error)),
error_med=median(pitch_error, na.rm=TRUE),
error_std=sd(pitch_error, na.rm=TRUE),
error_mean=mean(pitch_error, na.rm=TRUE))
rm(summary)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
View(participants)
View(unadj_wted_resp)
View(data)
?count
unadj_wted_resp <- data %>% count(seed, version, unadj_response,
wt=confidence, sort=TRUE) %>%
rename(unadj_wted_n=n)
unadj_freq_resp <- data %>% count(seed, version, unadj_response, sort=TRUE) %>%
rename(unadj_n=n)
adj_wted_resp <- data %>% count(seed, version, adj_response,
wt=confidence, sort=TRUE) %>%
rename(adj_wted_n=n)
adj_freq_resp <- data %>% count(seed, version, adj_response, sort=TRUE) %>%
rename(adj_n=n)
unadj_responses <- inner_join(unadj_wted_resp, unadj_freq_resp,
by=c("seed", "unadj_response"))
adj_responses <- inner_join(adj_wted_resp, adj_freq_resp,
by=c("seed", "adj_response"))
unadj_responses <- inner_join(unadj_wted_resp, unadj_freq_resp,
by=c("seed", "unadj_response", "version"))
adj_responses <- inner_join(adj_wted_resp, adj_freq_resp,
by=c("seed", "adj_response", "version"))
responses <- full_join(unadj_responses, adj_responses,
by=join_by("seed"=="seed",
"unadj_response"=="adj_response",
"version"=="version")) %>%
rename(response=unadj_response)
# write csvs of responses, data, and participants
responses %>% write.csv(file=paste0(dir, gen, "-responses.csv"), row.names=FALSE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
of the final melodies presented to the second phase
source("~/Desktop/Thesis/melodic_gen/analysis_gen/summarize.R", echo=TRUE)
View(results)
View(participants)
# lengths of the final melodies presented to the second phase
durations <- c(6.25, 5.90, 6.00, 6.25)
mean(durations)
sd(durations)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/summarize.R", echo=TRUE)
View(participants)
View(results)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/summarize.R", echo=TRUE)
View(participants)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/summarize.R", echo=TRUE)
View(participants)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/pitch_analysis.R", echo=TRUE)
source("~/Desktop/Thesis/melodic_gen/analysis_gen/summarize.R", echo=TRUE)
View(participants)
View(results)
df %>% group_by(gen) %>% summarize(low=sum(range))
View(participants)
df %>% summarize(low=sum(range)/nrow())
df %>% summarize(low=sum(range)/nrow(df))
library(dplyr)
library(tidyverse)
# import all participant data
files <- list.files(path="../data/participants/")
df <- read_csv(paste0("../data/participants/", files[1]), show_col_types=FALSE)
for (f in files[2:6]) {
df <- rbind(df, read_csv(paste0("../data/participants/", f), show_col_types=FALSE))
}
# recode gen var to factor
df$gen <- as.factor(df$gen)
# count number of ppl with no pitch error
df %>% group_by(gen) %>% filter(pitch_error==0) %>% summarize(n=n())
melodic_cloze <- data.frame(melody=factor(),
version=factor(),
gen_1=numeric(),
gen_2=numeric(),
gen_3=numeric(),
gen_4=numeric(),
gen_5=numeric(),
gen_6=numeric())
gen_3 <- read_csv("../data/gen_3/gen_3-responses_by_subject.csv")
gen_3 %>% count(melody, version)
View(gen_3)
gen_3 %>% count(seed, version)
df %>% group_by(gen) %>% filter(pitch_error==0) %>% summarize(n=n())
get_mode(df$pitch_error)
get_mode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
get_mode(df$pitch_error)
df %>% group_by(gen) %>% get_mode(df$pitch_error)
df %>% group_by(gen) %>% get_mode(pitch_error)
df %>% group_by(gen) %>%
summarize(mode_error = find_mode(pitch_error))
find_mode <- function(x) {
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
df %>% group_by(gen) %>%
summarize(mode_error = find_mode(pitch_error))
gen_2 <- read_csv("../data/gen_2/gen_2-responses_by_subject.csv")
gen_2 %>% count(seed, version)
gen_4 <- read_csv("../data/gen_4/gen_4-responses_by_subject.csv")
gen_4 %>% count(seed, version)
gen_5 <- read_csv("../data/gen_5/gen_5-responses_by_subject.csv")
gen_5 %>% count(seed, version)
citation("base64enc")
citation("dplyr")
citation("soundgen")
citation("stringr")
citation("tuneR")
citation("ez")
files <- list.files(path="../data/participants/")
df <- read_csv(paste0("../data/participants/", files[1]), show_col_types=FALSE)
library(dplyr)
library(tidyverse)
files <- list.files(path="../data/participants/")
df <- read_csv(paste0("../data/participants/", files[1]), show_col_types=FALSE)
for (f in files[2:6]) {
df <- rbind(df, read_csv(paste0("../data/participants/", f), show_col_types=FALSE))
}
range(df$pitch_error)
drop_na(df$pitch_error) %>% range(df$pitch_error)
df %>% drop_na(pitch_error) %>% range(pitch_error)
View(df)
conf_df <- read_csv("../data/gen_0/gen_0-responses_by_subject.csv", show_col_types=FALSE)
for (gen in c("gen_1", "gen_2", "gen_3", "gen_4", "gen_5")) {
conf_df <- rbind(df, read_csv(paste0("../data/", gen, "/", gen, "-responses_by_subject.csv"), show_col_types=FALSE))
}
View(conf_df)
for (gen in c("gen_1", "gen_2", "gen_3", "gen_4", "gen_5")) {
conf_df <- rbind(df,
read_csv(paste0("../data/", gen, "/", gen,
"-responses_by_subject.csv"), show_col_types=FALSE))
conf_df <- rbind(conf_df, read_csv("../data/gen_1/gen_1-responses_by_subject.csv", show_col_types=FALSE)
conf_df <- rbind(conf_df, read_csv("../data/gen_1/gen_1-responses_by_subject.csv", show_col_types=FALSE))
conf_df <- rbind(conf_df, read_csv("../data/gen_1/gen_1-responses_by_subject.csv", show_col_types=FALSE))
conf_df <- rbind(conf_df, read_csv("../data/gen_2/gen_2-responses_by_subject.csv", show_col_types=FALSE))
conf_df <- rbind(conf_df, read_csv("../data/gen_3/gen_3-responses_by_subject.csv", show_col_types=FALSE))
conf_df <- rbind(conf_df, read_csv("../data/gen_4/gen_4-responses_by_subject.csv", show_col_types=FALSE))
conf_df <- rbind(conf_df, read_csv("../data/gen_5/gen_5-responses_by_subject.csv", show_col_types=FALSE))
summary(conf_df$confidence)
conf_df %>% group_by(gen) %>% summarize(avg=mean(confidence))
View(conf_df)
conf_df %>% group_by(seed) %>% summarize(avg=mean(confidence))
conf_df %>% group_by(seed, version) %>% summarize(avg=mean(confidence))
View(df)
?merge
conf_df <- merge(conf_df, df, by=c("id", "music", "range", "pitch_error")
)
conf_df %>% group_by(gen) %>% summarize(avg=mean(confidence))
conf_df %>% group_by(gen) %>% summarize(avg=mean(confidence), sd=sd(confidence))
conf_df %>% group_by(seed) %>% summarize(avg=mean(confidence), sd=sd(confidence))
mean(conf_df$confidence)
sd(conf_df$confidence)
conf_df %>% group_by(seed, version) %>% summarize(avg=mean(confidence), sd=sd(confidence))
conf_df %>% group_by(seed, version, gen) %>% summarize(avg=mean(confidence), sd=sd(confidence))
